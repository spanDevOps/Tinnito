name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.12'
  RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
  DEPLOYMENT_TIMEOUT: 600  # 10 minutes
  HEALTH_CHECK_URL: https://tinnito.onrender.com/health

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Set up test environment
      run: |
        # Create dummy environment variables for testing
        echo "FLASK_SECRET_KEY=test-key" >> $GITHUB_ENV
        echo "R2_ENDPOINT_URL=https://test.r2.cloudflarestorage.com" >> $GITHUB_ENV
        echo "R2_ACCESS_KEY_ID=test-key" >> $GITHUB_ENV
        echo "R2_SECRET_ACCESS_KEY=test-secret" >> $GITHUB_ENV
        echo "R2_BUCKET=test-bucket" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
    
    - name: Run tests
      run: |
        pytest tests/ -v

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Render Deployment
        run: |
          curl -X POST "https://api.render.com/v1/services/${{ env.RENDER_SERVICE_ID }}/deploys" \
          -H "accept: application/json" \
          -H "authorization: Bearer ${{ secrets.RENDER_API_KEY }}"

      - name: Wait for deployment and check health
        run: |
          echo "Waiting for deployment to complete..."
          sleep 60  # Initial wait for deployment to start
          
          end_time=$((SECONDS + DEPLOYMENT_TIMEOUT))
          
          while [ $SECONDS -lt $end_time ]; do
            if curl -f "${{ env.HEALTH_CHECK_URL }}"; then
              echo "Deployment successful! Health check passed."
              exit 0
            fi
            echo "Health check failed, waiting 30 seconds..."
            sleep 30
          done
          
          echo "Deployment timeout after $DEPLOYMENT_TIMEOUT seconds"
          exit 1
